---
- name: gather OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - '{{ ansible_bios_version }}-{{ ansible_distribution }}.yml'
    - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'
    - '{{ ansible_distribution }}.yml'
    - '{{ ansible_os_family }}.yml'
    - '{{ cloud_platform }}-{{ ansible_distribution }}.yml'
  tags:
    - vars

- name: install epel package
  shell: "amazon-linux-extras install -y epel"
  become: yes
  ignore_errors: yes

- name: install required packages
  package:
    name: '{{ item }}'
    state: present
  become: true
  with_items: '{{ PACKAGES }}'


- name: download hmycli
  get_url: 
    url: https://harmony.one/hmycli
    dest: '/usr/sbin/hmy'
    mode: '0755'
  become: true

- name: create .config/rclone directory
  file:
    path: "{{ USER.home }}/.config/rclone"
    state: directory

- name: download rclone.sh
  get_url: 
    url: https://raw.githubusercontent.com/harmony-one/terraform/master/aws.1/files/rclone.sh
    dest: '{{ USER.home }}/rclone.sh'
    mode: '0755'

- name: download rclone.conf
  get_url:
    url: https://raw.githubusercontent.com/harmony-one/terraform/master/aws.1/files/rclone.conf
    dest: '{{ USER.home }}/.config/rclone/rclone.conf'
    mode: '0644'

- name: clean up legacy
  ignore_errors: yes
  file:
    path: "{{ USER.home }}/{{ item }}"
    state: absent
  with_items:
    - .hmy/blskeys
    - latest
    - staging
    - install-rclone.sh
    - node.err
    - node.log

- name: do fresh start
  ignore_errors: yes
  shell: rm -rf harmony_db_*
  when: do_fresh == 'true'

- name: download harmony binary
  get_url:
    url: 'https://harmony.one/binary'
    dest: '/usr/sbin/harmony'
    mode: '0755'
  become: true

- name: get harmony version
  shell: "/usr/sbin/harmony --version"
  register: Ver

- name: print harmony version
  debug:
    var: Ver.stdout

- name: create .hmy/blskeys directory
  file:
    path: "{{ USER.home }}/.hmy/blskeys"
    state: directory

- name: copy all bls keys and pass for validator node
  copy:
    src: "{{ host }}/"
    dest: "{{ USER.home }}/.hmy/blskeys/"
  when: node_type_var != 'Explorer'

- name: copy utils scripts
  copy:
    src: utils/
    dest: /usr/sbin
    mode: 0755
  become: true

- name: create dummy bls key and pass for explorer node
  file:
    path: "{{ USER.home }}/.hmy/blskeys/{{ item }}"
    state: touch
  with_items:
    - "bls.key"
    - "bls.pass"
  when: node_type_var == 'Explorer'

- name: copy harmony.conf file
  template:
    src: harmony.conf.j2
    dest: "{{ USER.home }}/harmony.conf"
    backup: yes
    force: yes

- name: Creating the shard.txt file
  copy:
   dest: "{{ USER.home }}/shard.txt"
   content: |
      {{ shard }}

- name: "make sure {{ db_dir }} exist"
  file:
    path: "{{ db_dir }}"
    state: directory
    mode: '0755'

# Create symlink to folder if db_dir starts by /
- name: Create a symlink to db folder if in a different partition
  file:
    src: "{{ db_dir }}"
    dest: "data"
    owner: "{{ USER.user }}"
    group: "{{ USER.group }}"
    state: link
  when: db_dir[0] == '/'

- name: tasks needs sudo
  block:
   - name: copy harmony service file
     template:
       src: harmony.service.j2
       dest: "/etc/systemd/system/harmony.service"
       backup: yes
       force: yes

   - name: disable selinux
     ignore_errors: yes
     selinux:
       state: disabled

   - name: enable harmony service
     systemd: 
       name: harmony
       daemon_reload: yes
       enabled: yes
       state: restarted
  become: true
  become_user: root

- name: tasks for Validator or pruned explorer node
  block:
   - name: install rclone 1
     get_url:
       url: https://rclone.org/install.sh
       dest: '{{ USER.home }}/install-rclone.sh'
       mode: '0755'

   - name: install rclone 2
     command:
        cmd: "{{ USER.home }}/install-rclone.sh"
     ignore_errors: yes
     become: true

   - name: run rclone
     command:
       cmd: "{{ USER.home }}/rclone.sh mainnet.min"
       chdir: "{{ USER.home }}/"
     ignore_errors: yes
  when: node_type_var != 'Explorer' and do_rclone == 'true' or force_rclone == 'true'
