---
- name: delete btc relayer repo
  file:
    path: '/home/{{ ansible_user }}/onebtc.relayer-client'
    state: absent
  ignore_errors: yes

- name: clone the repo onebtc.relayer-client
  git:
    repo: 'https://github.com/harmony-one/onebtc.relayer-client.git'
    dest: '/home/{{ ansible_user }}/onebtc.relayer-client'
    version: '{{ branch }}'

- name: copy dockerfile
  template:
    src: 'Dockerfile.be.j2'
    dest: '/home/{{ ansible_user }}/onebtc.relayer-client/Dockerfile'
    force: yes

- name: create directories for docker volumes
  file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
    owner: "{{ ansible_user}}"
    group: "{{ ansible_user}}"
  with_items:
    - '/home/{{ ansible_user }}/onebtc-disk'
    - '/home/{{ ansible_user }}/onebtc-disk/keys'
    - '/home/{{ ansible_user }}/onebtc-disk/aws'
  become: true

- name: copy relayers/security data to a shared volume
  copy:
    src: '{{ item.src }}'
    dest: '/home/{{ ansible_user }}/onebtc-disk/{{ item.dest }}'
  with_items:
  - { src: '{{ inventory_hostname }}.env.private', dest: 'keys/.env.private' }
  when: function == 'relayer' or function == 'security'

- name: copy vaults data to shared volume
  ignore_errors: yes
  copy:
    src: '{{ item.src }}'
    dest: '/home/{{ ansible_user }}/onebtc-disk/{{ item.dest }}'
  with_items:
  - { src: 'aws-config', dest: 'aws/config' }
  - { src: '{{ inventory_hostname }}.env.private', dest: 'keys/.env.private' }
  - { src: '{{ inventory_hostname }}/credentials', dest: 'aws/credentials' }
  - { src: '{{ inventory_hostname }}/btc-secret', dest: 'keys/btc-secret' }
  - { src: '{{ inventory_hostname }}/hmy-secret', dest: 'keys/hmy-secret' }
  when: function == 'vault'

- name: update repo env file with mongo container name
  lineinfile:
    path: '{{ item.src }}'
    regex: 'DATABASE_URL=mongodb://localhost:27017/MyDb'
    line: 'DATABASE_URL=mongodb://mongo:27017/MyDb'
    state: present
  with_items:
  - { src: '/home/{{ ansible_user }}/onebtc.relayer-client/.env.testnet'}
  - { src: '/home/{{ ansible_user }}/onebtc.relayer-client/.env.mainnet'}
  - { src: '/home/{{ ansible_user }}/onebtc.relayer-client/.env.security.mainnet'} 

- name: making sure the security node use different btc node
  lineinfile:
    path: '{{ item.src }}'
    regex: 'BTC_NODE_URL=https://btc.main.hmny.io'
    line: "BTC_NODE_URL={{ btcnodeurl }}"
    state: present
  with_items:
  - { src: '/home/{{ ansible_user }}/onebtc.relayer-client/.env.security.mainnet'} 
  when: function == 'security'

- name: build or rebuild container image
  docker_image:
    name: harmonyone/hmy-btc-relayer:latest
    build:
      path: '/home/{{ ansible_user }}/onebtc.relayer-client'
      pull: yes
      nocache: yes
    source: build
    state: present
    force_source: yes

- name: stop mongodb for restart/update
  ignore_errors: yes
  docker_container:
    name: 'mongo'
    state: stopped

- name: 'start mongodb'
  docker_container:
    name: 'mongo'
    image: 'mongo:5.0.3'
    ports: '127.0.0.1:27017:27017'
    volumes:
      - "/home/{{ ansible_user }}/mongodata:/data/db"
    restart_policy: unless-stopped
    networks:
      - name: "{{ docker_network }}"

- name: stop current container for update
  ignore_errors: yes
  docker_container:
    name: 'btc-relayer'
    state: stopped

- name: handle docker container start error
  block:
  - name: 'start hmy-btc-relayer:latest container'
    docker_container:
      name: 'btc-relayer'
      image: 'harmonyone/hmy-btc-relayer:latest'
      ports: 
        - "{{ docker_ports }}"
      volumes:
        - '/home/{{ ansible_user }}/onebtc-disk/aws/:/root/.aws/'
        - '/home/{{ ansible_user }}/onebtc-disk/keys/:/app/keys/'
      env:
        UI_PORT: "{{ virtual_port | string }}"
        #env var used for acme companion
        VIRTUAL_HOST: "{{ domain }}"
        VIRTUAL_PORT: "{{ virtual_port | string }}"
        LETSENCRYPT_HOST: "{{ domain }}"
        LETSENCRYPT_EMAIL: 'devops@harmony.one'
      restart_policy: unless-stopped
      networks:
        - name: "{{ docker_network }}"

  - name: wait container launched succeed
    wait_for:
      host: '0.0.0.0'
      port: "{{ virtual_port }}"
      delay: 15
      state: started

  - name: "Checking the api/vault-client/info for LAUNCHED every 15 sec for 5 minutes"
    uri:
      url: "http://localhost:{{ virtual_port | string }}/vault-client/info"
    register: _result
    until: _result.status == 200 and _result.json is defined and _result.json.status == "LAUNCHED"
    retries: 20
    delay: 15
    when: function == 'vault'

  - name: "Checking the security/info for LAUNCHED every 15 sec for 5 minutes"
    uri:
      url: "http://localhost:{{ virtual_port | string }}/security/info"
    register: _result
    until: _result.status == 200 and _result.json is defined and _result.json.security.status == "LAUNCHED"
    retries: 20
    delay: 15
    when: function == 'security'

  rescue:
    - name: Error messages
      debug:
        msg: 'This deployment failed and node will not be recoverable'
  always:
  - name: clear all secret files on the onebtc-disk
    ignore_errors: yes
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - '/home/{{ ansible_user }}/onebtc-disk/'

  - name: prune legacy images/container for update
    docker_prune:
      containers: yes
      images: yes
      images_filters:
        dangling: false
      builder_cache: yes
    become: yes
    ignore_errors: yes